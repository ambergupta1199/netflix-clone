{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundImage","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b618256c.chunk.js","sourcesContent":["//https://api.themoviedb.org/3/movie/550?api_key=19f84e11932abbc79e6d83f82d6d1045\r\n\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\nbaseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport axios from \"./axios\";\r\n\r\nimport movieTrailer from \"movie-trailer\";\r\nimport './Row.css';\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl , isLargeRow}) {\r\n  const [movies, setMovies] = useState([]);\r\nconst [trailerUrl,setTrailerUrl]=useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n      autoplay:1,\r\n    },\r\n  }\r\nconst handleClick=(movie) =>{\r\nif(trailerUrl)\r\nsetTrailerUrl(\"\");\r\nelse{\r\n  movieTrailer(movie.name)\r\n \r\n\r\n  .then((url)=> {\r\n    const urlParams=new URLSearchParams(new URL(url).search);\r\n    setTrailerUrl(urlParams.get(\"v\"));\r\n  })\r\n  .catch((error) =>\r\n    console.log(error)\r\n  );\r\n}\r\n}\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img key={movie.id} onClick={()=>handleClick(movie)} className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src={`${baseUrl}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} alt={movie.name} />\r\n        ))}\r\n      </div>\r\n      {trailerUrl &&  <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"19f84e11932abbc79e6d83f82d6d1045\";\r\nconst requests= {\r\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\nfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\nfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\nfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\nfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport './Banner.css'\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\nfunction truncate(str,n){\r\n    return str?.length>n?str.substr(0,n-1) + \"...\":str;\r\n}\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name ||movie?.original_name}</h1>\r\n       <div className=\"banner__buttons\">\r\n           <button className=\"banner__button\">Play</button>\r\n           <button className=\"banner__button\">My List</button>\r\n       </div>\r\n       \r\n           <h1 className=\"banner__description\">{truncate(movie?.overview)}</h1>\r\n       \r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\nfunction Nav() {\r\n    const[show,handleShow]=useState(false);\r\n    useEffect(()=>{\r\nwindow.addEventListener(\"scroll\",()=>{\r\nif(window.scrollY>100){\r\nhandleShow(true);\r\n}\r\nelse{\r\n    handleShow(false);\r\n};\r\n});\r\nreturn ()=>{\r\n    window.removeEventListener(\"scroll\");\r\n};\r\n    },[]);\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n        <img className=\"nav__logo\" src=\"https://www.luwia.nl/wp-content/uploads/2020/03/netflix-logo-1.jpg\"\r\n       alt=\"Netflix Logo\" ></img>\r\n          <img className=\"nav__avatar\" src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n       alt=\"Netflix Logo\" ></img>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Row from \"./Row\";\nimport './App.css';\nimport requests from './requests';\nimport Banner from './Banner'\nimport  Nav from './Nav'\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Nav></Nav>\n     <Banner></Banner>\n     <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n     <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n     <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n     <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n     <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n     <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n     <Row title=\"Romance Now\" fetchUrl={requests.fetchRomanceMovies}/>\n     <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}